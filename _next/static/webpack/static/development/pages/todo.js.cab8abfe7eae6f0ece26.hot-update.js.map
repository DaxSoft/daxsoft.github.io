{"version":3,"file":"static/webpack/static\\development\\pages\\todo.js.cab8abfe7eae6f0ece26.hot-update.js","sources":["webpack:///./client/components/todo/mobile/index.js"],"sourcesContent":["// ------------------------------------------------------------------\r\n// | [general]\r\n// ------------------------------------------------------------------\r\n\r\nimport React from 'react'\r\nimport fetch from 'isomorphic-unfetch'\r\nimport { useFetch, useLocalStorage } from '@vorlefan/react-hooks'\r\n\r\nimport {\r\n    Typography,\r\n    CircularProgress,\r\n    Tooltip,\r\n    IconButton,\r\n} from '@material-ui/core'\r\nimport { stylesRoot, todoStyles } from './styles'\r\nimport { fade } from '@material-ui/core/styles'\r\n\r\nimport DoneIcon from '@material-ui/icons/Done'\r\nimport DoneAllIcon from '@material-ui/icons/DoneAll'\r\nimport UpdateIcon from '@material-ui/icons/Update'\r\nimport LinkIcon from '@material-ui/icons/Link'\r\n\r\nfunction handleDate(createdAt, updateAt) {\r\n    let a = new Date(createdAt)\r\n    let b = new Date(updateAt)\r\n    let time = b.getTime() - a.getTime()\r\n    return time / (1000 * 3600 * 24)\r\n}\r\n\r\n// ------------------------------------------------------------------\r\n// | [Component]\r\n// ------------------------------------------------------------------\r\n\r\nconst Todo = ({ title, labels, state, body, createdAt, updateAt, href }) => {\r\n    const classes = todoStyles()\r\n\r\n    const isOpen = state === 'open'\r\n\r\n    const mainLabel = labels[0]\r\n\r\n    const lastUpdate = handleDate(createdAt, updateAt)\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            {!isOpen ? (\r\n                <DoneAllIcon className={classes.done} />\r\n            ) : (\r\n                <DoneIcon className={classes.open} />\r\n            )}\r\n\r\n            <Tooltip arrow={true} title={title}>\r\n                <Typography\r\n                    variant=\"button\"\r\n                    className={classes.title}\r\n                    noWrap={true}\r\n                >\r\n                    {title}\r\n                </Typography>\r\n            </Tooltip>\r\n\r\n            <Tooltip arrow={true} title={mainLabel.description}>\r\n                <Typography\r\n                    variant=\"button\"\r\n                    className={classes.label}\r\n                    style={{\r\n                        color: String('#' + mainLabel.color),\r\n                        backgroundColor: fade(\r\n                            String('#' + mainLabel.color),\r\n                            0.1\r\n                        ),\r\n                    }}\r\n                >\r\n                    {mainLabel.name}\r\n                </Typography>\r\n            </Tooltip>\r\n\r\n            <Tooltip arrow={true} title=\"How many days since the last update?\">\r\n                <div className={classes.update}>\r\n                    <UpdateIcon />\r\n                    <Typography variant=\"caption\">{lastUpdate} days</Typography>\r\n                </div>\r\n            </Tooltip>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default function Component({}) {\r\n    const classes = stylesRoot()\r\n\r\n    const cacheIssues = useLocalStorage('issues', [])\r\n\r\n    const issues = useFetch(\r\n        {\r\n            endpoint: 'https://api.github.com/repos/DaxSoft/react-hooks/issues', // daxsoft.github.io\r\n            onSuccess: (data) => {\r\n                cacheIssues.set(data)\r\n            },\r\n            onError: (err) => {\r\n                issues.data = cacheIssues.get()\r\n            },\r\n            startInit: cacheIssues.get(),\r\n        },\r\n        'GET',\r\n        fetch\r\n    )\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Typography variant=\"h3\" className={classes.title}>\r\n                To-Do\r\n            </Typography>\r\n            <Typography variant=\"body1\" className={classes.description}>\r\n                This is just a experimental page, where it makes a request from\r\n                the Github's API. <br />\r\n                Getting the issues from this portfolio. <br />\r\n                By this, I can create some sort of 'To-Do' for this website\r\n            </Typography>\r\n            <div className={classes.container}>\r\n                {issues.loading.isOn() ? (\r\n                    <CircularProgress\r\n                        color=\"secondary\"\r\n                        style={{ justifySelf: 'center', alignSelf: 'center' }}\r\n                    />\r\n                ) : (\r\n                    Array.isArray(issues.data) &&\r\n                    issues.data.length > 0 &&\r\n                    issues.data.map((value, key) => {\r\n                        if (value.author_association !== 'OWNER') return\r\n                        return (\r\n                            <Todo\r\n                                key={key}\r\n                                title={value.title}\r\n                                labels={value.labels}\r\n                                state={value.state}\r\n                                body={value.body}\r\n                                createdAt={value.created_at}\r\n                                updateAt={value.updated_at}\r\n                                href={value.html_url}\r\n                            />\r\n                        )\r\n                    })\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAFA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AAKA;;;;A","sourceRoot":""}